//
// Generated file, do not edit! Created by opp_msgtool 6.1 from NumVehicleMsg.msg.
//

#ifndef __VEINS_NUMVEHICLEMSG_M_H
#define __VEINS_NUMVEHICLEMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace veins {

class NumVehicleMsg;

}  // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress


namespace veins {

/**
 * Class generated from <tt>NumVehicleMsg.msg:29</tt> by opp_msgtool.
 * <pre>
 * packet NumVehicleMsg extends BaseFrame1609_4
 * {
 *     Coord senderPos;
 *     int numVehicles;
 *     simtime_t timeStampP;
 *     LAddress::L2Type senderAddress = -1;
 * }
 * </pre>
 */
class NumVehicleMsg : public ::veins::BaseFrame1609_4
{
  protected:
    Coord senderPos;
    int numVehicles = 0;
    ::omnetpp::simtime_t timeStampP = SIMTIME_ZERO;
    LAddress::L2Type senderAddress = -1;

  private:
    void copy(const NumVehicleMsg& other);

  protected:
    bool operator==(const NumVehicleMsg&) = delete;

  public:
    NumVehicleMsg(const char *name=nullptr, short kind=0);
    NumVehicleMsg(const NumVehicleMsg& other);
    virtual ~NumVehicleMsg();
    NumVehicleMsg& operator=(const NumVehicleMsg& other);
    virtual NumVehicleMsg *dup() const override {return new NumVehicleMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Coord& getSenderPos() const;
    virtual Coord& getSenderPosForUpdate() { return const_cast<Coord&>(const_cast<NumVehicleMsg*>(this)->getSenderPos());}
    virtual void setSenderPos(const Coord& senderPos);

    virtual int getNumVehicles() const;
    virtual void setNumVehicles(int numVehicles);

    virtual ::omnetpp::simtime_t getTimeStampP() const;
    virtual void setTimeStampP(::omnetpp::simtime_t timeStampP);

    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<NumVehicleMsg*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NumVehicleMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NumVehicleMsg& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::NumVehicleMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::NumVehicleMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_NUMVEHICLEMSG_M_H

