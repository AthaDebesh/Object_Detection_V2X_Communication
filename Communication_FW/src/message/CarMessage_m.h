//
// Generated file, do not edit! Created by opp_msgtool 6.1 from message/CarMessage.msg.
//

#ifndef __VEINS_CARMESSAGE_M_H
#define __VEINS_CARMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace veins {

class CarMessage;

}  // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/base/utils/SimpleAddress_m.h" // import veins.base.utils.SimpleAddress

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4


namespace veins {

/**
 * Class generated from <tt>message/CarMessage.msg:22</tt> by opp_msgtool.
 * <pre>
 * packet CarMessage extends BaseFrame1609_4
 * {
 *     string imageData;
 *     LAddress::L2Type senderAddress = -1;
 * 
 * }
 * </pre>
 */
class CarMessage : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::opp_string imageData;
    LAddress::L2Type senderAddress = -1;

  private:
    void copy(const CarMessage& other);

  protected:
    bool operator==(const CarMessage&) = delete;

  public:
    CarMessage(const char *name=nullptr, short kind=0);
    CarMessage(const CarMessage& other);
    virtual ~CarMessage();
    CarMessage& operator=(const CarMessage& other);
    virtual CarMessage *dup() const override {return new CarMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getImageData() const;
    virtual void setImageData(const char * imageData);

    virtual const LAddress::L2Type& getSenderAddress() const;
    virtual LAddress::L2Type& getSenderAddressForUpdate() { return const_cast<LAddress::L2Type&>(const_cast<CarMessage*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const LAddress::L2Type& senderAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CarMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CarMessage& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::CarMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::CarMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_CARMESSAGE_M_H

