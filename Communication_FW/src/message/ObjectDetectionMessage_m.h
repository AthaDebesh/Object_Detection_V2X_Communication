//
// Generated file, do not edit! Created by opp_msgtool 6.1 from message/ObjectDetectionMessage.msg.
//

#ifndef __VEINS_OBJECTDETECTIONMESSAGE_M_H
#define __VEINS_OBJECTDETECTIONMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace veins {

class ObjectDetectionMessage;
class ImagePacketMessage;

}  // namespace veins

#include "veins/base/utils/Coord_m.h" // import veins.base.utils.Coord

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4


namespace veins {

/**
 * Class generated from <tt>message/ObjectDetectionMessage.msg:21</tt> by opp_msgtool.
 * <pre>
 * packet ObjectDetectionMessage extends BaseFrame1609_4
 * {
 *     string vehicleId;
 *     double detectionTime;
 *     Coord position;
 *     bool objectDetected;
 *     double distanceToIntersection;
 * }
 * </pre>
 */
class ObjectDetectionMessage : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::opp_string vehicleId;
    double detectionTime = 0;
    Coord position;
    bool objectDetected = false;
    double distanceToIntersection = 0;

  private:
    void copy(const ObjectDetectionMessage& other);

  protected:
    bool operator==(const ObjectDetectionMessage&) = delete;

  public:
    ObjectDetectionMessage(const char *name=nullptr, short kind=0);
    ObjectDetectionMessage(const ObjectDetectionMessage& other);
    virtual ~ObjectDetectionMessage();
    ObjectDetectionMessage& operator=(const ObjectDetectionMessage& other);
    virtual ObjectDetectionMessage *dup() const override {return new ObjectDetectionMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getVehicleId() const;
    virtual void setVehicleId(const char * vehicleId);

    virtual double getDetectionTime() const;
    virtual void setDetectionTime(double detectionTime);

    virtual const Coord& getPosition() const;
    virtual Coord& getPositionForUpdate() { return const_cast<Coord&>(const_cast<ObjectDetectionMessage*>(this)->getPosition());}
    virtual void setPosition(const Coord& position);

    virtual bool getObjectDetected() const;
    virtual void setObjectDetected(bool objectDetected);

    virtual double getDistanceToIntersection() const;
    virtual void setDistanceToIntersection(double distanceToIntersection);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ObjectDetectionMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ObjectDetectionMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>message/ObjectDetectionMessage.msg:29</tt> by opp_msgtool.
 * <pre>
 * packet ImagePacketMessage extends BaseFrame1609_4
 * {
 *     string originalSender;
 *     int packetNumber;
 *     int totalPackets;
 *     string imageDataChunk;
 *     int checksum;
 * }
 * </pre>
 */
class ImagePacketMessage : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::opp_string originalSender;
    int packetNumber = 0;
    int totalPackets = 0;
    ::omnetpp::opp_string imageDataChunk;
    int checksum = 0;

  private:
    void copy(const ImagePacketMessage& other);

  protected:
    bool operator==(const ImagePacketMessage&) = delete;

  public:
    ImagePacketMessage(const char *name=nullptr, short kind=0);
    ImagePacketMessage(const ImagePacketMessage& other);
    virtual ~ImagePacketMessage();
    ImagePacketMessage& operator=(const ImagePacketMessage& other);
    virtual ImagePacketMessage *dup() const override {return new ImagePacketMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getOriginalSender() const;
    virtual void setOriginalSender(const char * originalSender);

    virtual int getPacketNumber() const;
    virtual void setPacketNumber(int packetNumber);

    virtual int getTotalPackets() const;
    virtual void setTotalPackets(int totalPackets);

    virtual const char * getImageDataChunk() const;
    virtual void setImageDataChunk(const char * imageDataChunk);

    virtual int getChecksum() const;
    virtual void setChecksum(int checksum);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ImagePacketMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ImagePacketMessage& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::ObjectDetectionMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::ObjectDetectionMessage*>(ptr.get<cObject>()); }
template<> inline veins::ImagePacketMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::ImagePacketMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_OBJECTDETECTIONMESSAGE_M_H

